node {
  name: "data/wav_filename"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "data/ReadFile"
  op: "ReadFile"
  input: "data/wav_filename"
}
node {
  name: "data/DecodeWav"
  op: "DecodeWav"
  input: "data/ReadFile"
  attr {
    key: "desired_channels"
    value {
      i: 1
    }
  }
  attr {
    key: "desired_samples"
    value {
      i: 32000
    }
  }
}
node {
  name: "data/foreground_volume"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "data/Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "data/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/ExpandDims"
  op: "ExpandDims"
  input: "data/DecodeWav"
  input: "data/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "data/ExpandDims_1"
  op: "ExpandDims"
  input: "data/ExpandDims"
  input: "data/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000}\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "data/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/strided_slice"
  op: "StridedSlice"
  input: "data/Shape"
  input: "data/strided_slice/stack"
  input: "data/strided_slice/stack_1"
  input: "data/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "data/Cast"
  op: "Cast"
  input: "data/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "data/mul"
  op: "Mul"
  input: "data/Cast"
  input: "data/Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/Cast_1"
  op: "Cast"
  input: "data/mul"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize/size/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize/size"
  op: "Pack"
  input: "data/Cast_1"
  input: "data/resize/size/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize/ResizeBilinear"
  op: "ResizeBilinear"
  input: "data/ExpandDims_1"
  input: "data/resize/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Shape"
  op: "Shape"
  input: "data/resize/ResizeBilinear"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/strided_slice"
  op: "StridedSlice"
  input: "data/resize_image_with_crop_or_pad/Shape"
  input: "data/resize_image_with_crop_or_pad/strided_slice/stack"
  input: "data/resize_image_with_crop_or_pad/strided_slice/stack_1"
  input: "data/resize_image_with_crop_or_pad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Less"
  op: "Less"
  input: "data/resize_image_with_crop_or_pad/assert_positive/Const"
  input: "data/resize_image_with_crop_or_pad/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Less"
  input: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/All"
  input: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/Rank"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/range"
  op: "Range"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/range/start"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Rank"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/range"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/All"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_0"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_1"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_2"
  input: "data/resize_image_with_crop_or_pad/Rank"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_4"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/control_dependency"
  op: "Identity"
  input: "data/resize/ResizeBilinear"
  input: "^data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data/resize/ResizeBilinear"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Shape_1"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/unstack"
  op: "Unpack"
  input: "data/resize_image_with_crop_or_pad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32000
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/sub"
  op: "Sub"
  input: "data/resize_image_with_crop_or_pad/sub/x"
  input: "data/resize_image_with_crop_or_pad/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Neg"
  op: "Neg"
  input: "data/resize_image_with_crop_or_pad/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/floordiv"
  op: "FloorDiv"
  input: "data/resize_image_with_crop_or_pad/Neg"
  input: "data/resize_image_with_crop_or_pad/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Maximum"
  op: "Maximum"
  input: "data/resize_image_with_crop_or_pad/floordiv"
  input: "data/resize_image_with_crop_or_pad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/floordiv_1"
  op: "FloorDiv"
  input: "data/resize_image_with_crop_or_pad/sub"
  input: "data/resize_image_with_crop_or_pad/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Maximum_1"
  op: "Maximum"
  input: "data/resize_image_with_crop_or_pad/floordiv_1"
  input: "data/resize_image_with_crop_or_pad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Minimum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32000
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Minimum"
  op: "Minimum"
  input: "data/resize_image_with_crop_or_pad/Minimum/x"
  input: "data/resize_image_with_crop_or_pad/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice"
  op: "StridedSlice"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack_1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/Const"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Less"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/All"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/range"
  op: "Range"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/range/start"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Rank"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/range"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/All"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_0"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_2"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_4"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_1"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/unstack"
  op: "Unpack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/Maximum"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Greater"
  op: "Greater"
  input: "data/resize_image_with_crop_or_pad/Minimum"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Greater"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/add"
  op: "AddV2"
  input: "data/resize_image_with_crop_or_pad/Minimum"
  input: "data/resize_image_with_crop_or_pad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/unstack:1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual_1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/control_dependency"
  op: "Identity"
  input: "data/resize_image_with_crop_or_pad/control_dependency"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data/resize/ResizeBilinear"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack"
  op: "Pack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/0"
  input: "data/resize_image_with_crop_or_pad/Maximum"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/2"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_2"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1"
  op: "StridedSlice"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_2"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1/stack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1/stack_1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_3"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2"
  op: "StridedSlice"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_3"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2/stack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2/stack_1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1"
  op: "Pack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1"
  input: "data/resize_image_with_crop_or_pad/Minimum"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1/2"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  op: "Slice"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/control_dependency"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Shape"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/unstack"
  op: "Unpack"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32000
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub"
  op: "Sub"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub/x"
  input: "data/resize_image_with_crop_or_pad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub_1"
  op: "Sub"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Shape_1"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice"
  op: "StridedSlice"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Shape_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/Const"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Less"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/All"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/range"
  op: "Range"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/range/start"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Rank"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/range"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/All"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_0"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_2"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_4"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/Maximum_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/control_dependency"
  op: "Identity"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  input: "^data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert"
  input: "^data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack"
  op: "Pack"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/0"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/1"
  input: "data/resize_image_with_crop_or_pad/Maximum_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/4"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/5"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/6"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/7"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape"
  op: "Reshape"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Pad"
  op: "Pad"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/control_dependency"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/control_dependency_1"
  op: "Identity"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data/resize_image_with_crop_or_pad/pad_to_bounding_box/Pad"
      }
    }
  }
}
node {
  name: "data/Squeeze"
  op: "Squeeze"
  input: "data/resize_image_with_crop_or_pad/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 3
      }
    }
  }
}
node {
  name: "data/Mul_1"
  op: "Mul"
  input: "data/Squeeze"
  input: "data/foreground_volume"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/time_shift_padding"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "data/time_shift_offset"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "data/Pad"
  op: "Pad"
  input: "data/Mul_1"
  input: "data/time_shift_padding"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000}\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "data/Slice"
  op: "Slice"
  input: "data/Pad"
  input: "data/time_shift_offset"
  input: "data/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/background_data"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32000
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "data/background_volume"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "data/Mul_2"
  op: "Mul"
  input: "data/background_data"
  input: "data/background_volume"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/Add"
  op: "AddV2"
  input: "data/Mul_2"
  input: "data/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/clip_by_value/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "data/clip_by_value/Minimum"
  op: "Minimum"
  input: "data/Add"
  input: "data/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "data/clip_by_value"
  op: "Maximum"
  input: "data/clip_by_value/Minimum"
  input: "data/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/Mul_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32768.0
      }
    }
  }
}
node {
  name: "data/Mul_3"
  op: "Mul"
  input: "data/clip_by_value"
  input: "data/Mul_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/Cast_2"
  op: "Cast"
  input: "data/Mul_3"
  attr {
    key: "DstT"
    value {
      type: DT_INT16
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "data/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "data/Reshape"
  op: "Reshape"
  input: "data/Cast_2"
  input: "data/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT16
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/AudioMicrofrontend"
  op: "AudioMicrofrontend"
  input: "data/Reshape"
  attr {
    key: "enable_log"
    value {
      b: true
    }
  }
  attr {
    key: "enable_pcan"
    value {
      b: true
    }
  }
  attr {
    key: "even_smoothing"
    value {
      f: 0.02500000037252903
    }
  }
  attr {
    key: "frame_stride"
    value {
      i: 1
    }
  }
  attr {
    key: "gain_bits"
    value {
      i: 21
    }
  }
  attr {
    key: "left_context"
    value {
      i: 0
    }
  }
  attr {
    key: "lower_band_limit"
    value {
      f: 125.0
    }
  }
  attr {
    key: "min_signal_remaining"
    value {
      f: 0.05000000074505806
    }
  }
  attr {
    key: "num_channels"
    value {
      i: 40
    }
  }
  attr {
    key: "odd_smoothing"
    value {
      f: 0.05999999865889549
    }
  }
  attr {
    key: "out_scale"
    value {
      i: 1
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "pcan_offset"
    value {
      f: 80.0
    }
  }
  attr {
    key: "pcan_strength"
    value {
      f: 0.949999988079071
    }
  }
  attr {
    key: "right_context"
    value {
      i: 0
    }
  }
  attr {
    key: "sample_rate"
    value {
      i: 16000
    }
  }
  attr {
    key: "scale_shift"
    value {
      i: 6
    }
  }
  attr {
    key: "smoothing_bits"
    value {
      i: 10
    }
  }
  attr {
    key: "upper_band_limit"
    value {
      f: 7500.0
    }
  }
  attr {
    key: "window_size"
    value {
      i: 30
    }
  }
  attr {
    key: "window_step"
    value {
      i: 20
    }
  }
  attr {
    key: "zero_padding"
    value {
      b: false
    }
  }
}
node {
  name: "data/Mul_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0390625
      }
    }
  }
}
node {
  name: "data/Mul_4"
  op: "Mul"
  input: "data/AudioMicrofrontend"
  input: "data/Mul_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "input_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 99
        }
        dim {
          size: 40
        }
      }
    }
  }
}
node {
  name: "ExpandDims/dim"
  op: "Const"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ExpandDims"
  op: "ExpandDims"
  input: "input_1"
  input: "ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^ExpandDims/dim"
}
node {
  name: "stream/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\n\000\000\000\004\000\000\000\001\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "stream/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09393364191055298
      }
    }
  }
}
node {
  name: "stream/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09393364191055298
      }
    }
  }
}
node {
  name: "stream/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\317\310.\000\000\000\000"
      }
    }
  }
}
node {
  name: "stream/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "stream/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/kernel"
      }
    }
  }
}
node {
  name: "stream/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "stream/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "stream/kernel/Initializer/stateless_random_uniform/shape"
  input: "stream/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "stream/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "stream/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "stream/kernel/Initializer/stateless_random_uniform/max"
  input: "stream/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/kernel"
      }
    }
  }
}
node {
  name: "stream/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "stream/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "stream/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/kernel"
      }
    }
  }
}
node {
  name: "stream/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "stream/kernel/Initializer/stateless_random_uniform/mul"
  input: "stream/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/kernel"
      }
    }
  }
}
node {
  name: "stream/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 4
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stream/kernel"
    }
  }
}
node {
  name: "stream/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "stream/kernel"
}
node {
  name: "stream/kernel/Assign"
  op: "AssignVariableOp"
  input: "stream/kernel"
  input: "stream/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "stream/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "stream/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stream/bias"
    }
  }
}
node {
  name: "stream/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "stream/bias"
}
node {
  name: "stream/bias/Assign"
  op: "AssignVariableOp"
  input: "stream/bias"
  input: "stream/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "stream/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream/conv2d/Conv2D"
  op: "Conv2D"
  input: "ExpandDims"
  input: "stream/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "stream/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "stream/conv2d/Conv2D"
  input: "stream/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization/beta"
    }
  }
}
node {
  name: "batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization/beta"
}
node {
  name: "batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization/beta"
  input: "batch_normalization/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization/moving_mean"
    }
  }
}
node {
  name: "batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization/moving_mean"
}
node {
  name: "batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization/moving_mean"
  input: "batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization/moving_variance"
    }
  }
}
node {
  name: "batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization/moving_variance"
}
node {
  name: "batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization/moving_variance"
  input: "batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "keras_learning_phase/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "keras_learning_phase"
  op: "PlaceholderWithDefault"
  input: "keras_learning_phase/input"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "batch_normalization/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "batch_normalization/beta"
  input: "batch_normalization/moving_mean"
  input: "batch_normalization/moving_variance"
  input: "stream/conv2d/BiasAdd"
  input: "batch_normalization/Const"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_cond_false_254"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 90
          }
          dim {
            size: 19
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_cond_true_253"
      }
    }
  }
}
node {
  name: "batch_normalization/cond/Identity"
  op: "Identity"
  input: "batch_normalization/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/cond/Identity_1"
  op: "Identity"
  input: "batch_normalization/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/cond/Identity_2"
  op: "Identity"
  input: "batch_normalization/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/cond/Identity_3"
  op: "Identity"
  input: "batch_normalization/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization/cond/Identity_4"
  op: "Identity"
  input: "batch_normalization/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization/cond/Identity_5"
  op: "Identity"
  input: "batch_normalization/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization/cond/Identity_6"
  op: "Identity"
  input: "batch_normalization/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization/cond/Identity_7"
  op: "Identity"
  input: "batch_normalization/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization/cond/Identity_8"
  op: "Identity"
  input: "batch_normalization/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_cond_1_false_316"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_cond_1_true_315"
      }
    }
  }
}
node {
  name: "batch_normalization/cond_1/Identity"
  op: "Identity"
  input: "batch_normalization/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization/AssignMovingAvg/sub/x"
  input: "batch_normalization/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization/AssignMovingAvg/sub_1"
  input: "batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization/moving_mean"
  input: "batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization/moving_mean"
  input: "^batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization/AssignMovingAvg_1/sub/x"
  input: "batch_normalization/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization/AssignMovingAvg_1/sub_1"
  input: "batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization/moving_variance"
  input: "batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization/moving_variance"
  input: "^batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "activation/Relu"
  op: "Relu"
  input: "batch_normalization/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1980295032262802
      }
    }
  }
}
node {
  name: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1980295032262802
      }
    }
  }
}
node {
  name: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\242\270\3107\000\000\000\000"
      }
    }
  }
}
node {
  name: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_1/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stream_1/depthwise_kernel"
    }
  }
}
node {
  name: "stream_1/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "stream_1/depthwise_kernel"
}
node {
  name: "stream_1/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "stream_1/depthwise_kernel"
  input: "stream_1/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "stream_1/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_1/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "stream_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stream_1/bias"
    }
  }
}
node {
  name: "stream_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "stream_1/bias"
}
node {
  name: "stream_1/bias/Assign"
  op: "AssignVariableOp"
  input: "stream_1/bias"
  input: "stream_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "stream_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_1/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_1/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d/depthwise"
  op: "DepthwiseConv2dNative"
  input: "activation/Relu"
  input: "stream_1/depthwise_conv2d/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_1/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_1/depthwise_conv2d/BiasAdd"
  op: "BiasAdd"
  input: "stream_1/depthwise_conv2d/depthwise"
  input: "stream_1/depthwise_conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_1/beta"
    }
  }
}
node {
  name: "batch_normalization_1/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/beta"
}
node {
  name: "batch_normalization_1/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_1/beta"
  input: "batch_normalization_1/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_1/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_1/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/moving_mean"
}
node {
  name: "batch_normalization_1/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_1/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_1/moving_variance"
}
node {
  name: "batch_normalization_1/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_1/moving_variance"
  input: "batch_normalization_1/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "batch_normalization_1/beta"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/moving_variance"
  input: "stream_1/depthwise_conv2d/BiasAdd"
  input: "batch_normalization_1/Const"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_1_cond_false_374"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 88
          }
          dim {
            size: 17
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_1_cond_true_373"
      }
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity"
  op: "Identity"
  input: "batch_normalization_1/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity_1"
  op: "Identity"
  input: "batch_normalization_1/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity_2"
  op: "Identity"
  input: "batch_normalization_1/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity_3"
  op: "Identity"
  input: "batch_normalization_1/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity_4"
  op: "Identity"
  input: "batch_normalization_1/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity_5"
  op: "Identity"
  input: "batch_normalization_1/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity_6"
  op: "Identity"
  input: "batch_normalization_1/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity_7"
  op: "Identity"
  input: "batch_normalization_1/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_1/cond/Identity_8"
  op: "Identity"
  input: "batch_normalization_1/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_1/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_1_cond_1_false_436"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_1_cond_1_true_435"
      }
    }
  }
}
node {
  name: "batch_normalization_1/cond_1/Identity"
  op: "Identity"
  input: "batch_normalization_1/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_1/AssignMovingAvg/sub/x"
  input: "batch_normalization_1/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_1/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_1/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_1/AssignMovingAvg/sub_1"
  input: "batch_normalization_1/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_mean"
  input: "^batch_normalization_1/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_1/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_1/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_1/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_1/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_1/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_1/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_1/moving_variance"
  input: "batch_normalization_1/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_1/moving_variance"
  input: "^batch_normalization_1/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "activation_1/Relu"
  op: "Relu"
  input: "batch_normalization_1/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4330126941204071
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4330126941204071
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "K\255\353\013\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "conv2d_1/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "conv2d_1/kernel/Initializer/stateless_random_uniform/shape"
  input: "conv2d_1/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "conv2d_1/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "conv2d_1/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "conv2d_1/kernel/Initializer/stateless_random_uniform/max"
  input: "conv2d_1/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "conv2d_1/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "conv2d_1/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "conv2d_1/kernel/Initializer/stateless_random_uniform/mul"
  input: "conv2d_1/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_1/kernel"
    }
  }
}
node {
  name: "conv2d_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_1/kernel"
}
node {
  name: "conv2d_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_1/kernel"
  input: "conv2d_1/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_1/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_1/bias"
    }
  }
}
node {
  name: "conv2d_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_1/bias"
}
node {
  name: "conv2d_1/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_1/bias"
  input: "conv2d_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_1/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_1/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/Conv2D"
  op: "Conv2D"
  input: "activation_1/Relu"
  input: "conv2d_1/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_1/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_1/Conv2D"
  input: "conv2d_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_2/beta"
    }
  }
}
node {
  name: "batch_normalization_2/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/beta"
}
node {
  name: "batch_normalization_2/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_2/beta"
  input: "batch_normalization_2/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_2/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_2/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/moving_mean"
}
node {
  name: "batch_normalization_2/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_2/moving_mean"
  input: "batch_normalization_2/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_2/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_2/moving_variance"
}
node {
  name: "batch_normalization_2/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_2/moving_variance"
  input: "batch_normalization_2/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "batch_normalization_2/beta"
  input: "batch_normalization_2/moving_mean"
  input: "batch_normalization_2/moving_variance"
  input: "conv2d_1/BiasAdd"
  input: "batch_normalization_2/Const"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_2_cond_false_492"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 88
          }
          dim {
            size: 17
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_2_cond_true_491"
      }
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity"
  op: "Identity"
  input: "batch_normalization_2/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity_1"
  op: "Identity"
  input: "batch_normalization_2/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity_2"
  op: "Identity"
  input: "batch_normalization_2/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity_3"
  op: "Identity"
  input: "batch_normalization_2/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity_4"
  op: "Identity"
  input: "batch_normalization_2/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity_5"
  op: "Identity"
  input: "batch_normalization_2/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity_6"
  op: "Identity"
  input: "batch_normalization_2/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity_7"
  op: "Identity"
  input: "batch_normalization_2/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_2/cond/Identity_8"
  op: "Identity"
  input: "batch_normalization_2/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_2/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_2_cond_1_false_554"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_2_cond_1_true_553"
      }
    }
  }
}
node {
  name: "batch_normalization_2/cond_1/Identity"
  op: "Identity"
  input: "batch_normalization_2/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_2/AssignMovingAvg/sub/x"
  input: "batch_normalization_2/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_2/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_2/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_2/AssignMovingAvg/sub_1"
  input: "batch_normalization_2/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_2/moving_mean"
  input: "batch_normalization_2/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_mean"
  input: "^batch_normalization_2/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_2/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_2/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_2/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_2/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_2/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_2/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_2/moving_variance"
  input: "batch_normalization_2/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_2/moving_variance"
  input: "^batch_normalization_2/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "activation_2/Relu"
  op: "Relu"
  input: "batch_normalization_2/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1980295032262802
      }
    }
  }
}
node {
  name: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1980295032262802
      }
    }
  }
}
node {
  name: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\216x<*\000\000\000\000"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stream_2/depthwise_kernel"
    }
  }
}
node {
  name: "stream_2/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "stream_2/depthwise_kernel"
}
node {
  name: "stream_2/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "stream_2/depthwise_kernel"
  input: "stream_2/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "stream_2/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_2/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_2/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "stream_2/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_2/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stream_2/bias"
    }
  }
}
node {
  name: "stream_2/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "stream_2/bias"
}
node {
  name: "stream_2/bias/Assign"
  op: "AssignVariableOp"
  input: "stream_2/bias"
  input: "stream_2/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "stream_2/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_2/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_1/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_2/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_1/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_1/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_1/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "X\000\000\000\021\000\000\000"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_1/depthwise/required_space_to_batch_paddings/base_paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_1/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_1/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_1/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_1/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_1/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "activation_2/Relu"
  input: "stream_2/depthwise_conv2d_1/depthwise/SpaceToBatchND/block_shape"
  input: "stream_2/depthwise_conv2d_1/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_1/depthwise"
  op: "DepthwiseConv2dNative"
  input: "stream_2/depthwise_conv2d_1/depthwise/SpaceToBatchND"
  input: "stream_2/depthwise_conv2d_1/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_1/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_1/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_1/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "stream_2/depthwise_conv2d_1/depthwise"
  input: "stream_2/depthwise_conv2d_1/depthwise/BatchToSpaceND/block_shape"
  input: "stream_2/depthwise_conv2d_1/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_2/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_2/depthwise_conv2d_1/BiasAdd"
  op: "BiasAdd"
  input: "stream_2/depthwise_conv2d_1/depthwise/BatchToSpaceND"
  input: "stream_2/depthwise_conv2d_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_3/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_3/beta"
    }
  }
}
node {
  name: "batch_normalization_3/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/beta"
}
node {
  name: "batch_normalization_3/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_3/beta"
  input: "batch_normalization_3/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_3/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_3/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/moving_mean"
}
node {
  name: "batch_normalization_3/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_3/moving_mean"
  input: "batch_normalization_3/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_3/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_3/moving_variance"
}
node {
  name: "batch_normalization_3/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_3/moving_variance"
  input: "batch_normalization_3/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "batch_normalization_3/beta"
  input: "batch_normalization_3/moving_mean"
  input: "batch_normalization_3/moving_variance"
  input: "stream_2/depthwise_conv2d_1/BiasAdd"
  input: "batch_normalization_3/Const"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_3_cond_false_622"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 84
          }
          dim {
            size: 13
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_3_cond_true_621"
      }
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity"
  op: "Identity"
  input: "batch_normalization_3/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity_1"
  op: "Identity"
  input: "batch_normalization_3/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity_2"
  op: "Identity"
  input: "batch_normalization_3/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity_3"
  op: "Identity"
  input: "batch_normalization_3/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity_4"
  op: "Identity"
  input: "batch_normalization_3/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity_5"
  op: "Identity"
  input: "batch_normalization_3/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity_6"
  op: "Identity"
  input: "batch_normalization_3/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity_7"
  op: "Identity"
  input: "batch_normalization_3/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_3/cond/Identity_8"
  op: "Identity"
  input: "batch_normalization_3/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_3/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_3_cond_1_false_684"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_3_cond_1_true_683"
      }
    }
  }
}
node {
  name: "batch_normalization_3/cond_1/Identity"
  op: "Identity"
  input: "batch_normalization_3/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_3/AssignMovingAvg/sub/x"
  input: "batch_normalization_3/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_3/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_3/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_3/AssignMovingAvg/sub_1"
  input: "batch_normalization_3/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_3/moving_mean"
  input: "batch_normalization_3/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_mean"
  input: "^batch_normalization_3/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_3/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_3/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_3/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_3/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_3/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_3/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_3/moving_variance"
  input: "batch_normalization_3/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_3/moving_variance"
  input: "^batch_normalization_3/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "activation_3/Relu"
  op: "Relu"
  input: "batch_normalization_3/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4330126941204071
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4330126941204071
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "lv\004\025\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "conv2d_2/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "conv2d_2/kernel/Initializer/stateless_random_uniform/shape"
  input: "conv2d_2/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "conv2d_2/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "conv2d_2/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "conv2d_2/kernel/Initializer/stateless_random_uniform/max"
  input: "conv2d_2/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "conv2d_2/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "conv2d_2/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "conv2d_2/kernel/Initializer/stateless_random_uniform/mul"
  input: "conv2d_2/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_2/kernel"
    }
  }
}
node {
  name: "conv2d_2/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_2/kernel"
}
node {
  name: "conv2d_2/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_2/kernel"
  input: "conv2d_2/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_2/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_2/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_2/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_2/bias"
    }
  }
}
node {
  name: "conv2d_2/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_2/bias"
}
node {
  name: "conv2d_2/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_2/bias"
  input: "conv2d_2/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_2/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_2/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_2/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/Conv2D"
  op: "Conv2D"
  input: "activation_3/Relu"
  input: "conv2d_2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_2/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_2/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_2/Conv2D"
  input: "conv2d_2/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_4/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_4/beta"
    }
  }
}
node {
  name: "batch_normalization_4/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_4/beta"
}
node {
  name: "batch_normalization_4/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_4/beta"
  input: "batch_normalization_4/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_4/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_4/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_4/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_4/moving_mean"
}
node {
  name: "batch_normalization_4/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_4/moving_mean"
  input: "batch_normalization_4/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_4/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_4/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_4/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_4/moving_variance"
}
node {
  name: "batch_normalization_4/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_4/moving_variance"
  input: "batch_normalization_4/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_4/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "batch_normalization_4/beta"
  input: "batch_normalization_4/moving_mean"
  input: "batch_normalization_4/moving_variance"
  input: "conv2d_2/BiasAdd"
  input: "batch_normalization_4/Const"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_4_cond_false_740"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 84
          }
          dim {
            size: 13
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_4_cond_true_739"
      }
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity"
  op: "Identity"
  input: "batch_normalization_4/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity_1"
  op: "Identity"
  input: "batch_normalization_4/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity_2"
  op: "Identity"
  input: "batch_normalization_4/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity_3"
  op: "Identity"
  input: "batch_normalization_4/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity_4"
  op: "Identity"
  input: "batch_normalization_4/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity_5"
  op: "Identity"
  input: "batch_normalization_4/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity_6"
  op: "Identity"
  input: "batch_normalization_4/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity_7"
  op: "Identity"
  input: "batch_normalization_4/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_4/cond/Identity_8"
  op: "Identity"
  input: "batch_normalization_4/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_4/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_4_cond_1_false_802"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_4_cond_1_true_801"
      }
    }
  }
}
node {
  name: "batch_normalization_4/cond_1/Identity"
  op: "Identity"
  input: "batch_normalization_4/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_4/AssignMovingAvg/sub/x"
  input: "batch_normalization_4/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_4/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_4/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_4/AssignMovingAvg/sub_1"
  input: "batch_normalization_4/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_4/moving_mean"
  input: "batch_normalization_4/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_4/moving_mean"
  input: "^batch_normalization_4/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_4/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_4/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_4/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_4/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_4/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_4/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_4/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_4/moving_variance"
  input: "batch_normalization_4/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_4/moving_variance"
  input: "^batch_normalization_4/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "activation_4/Relu"
  op: "Relu"
  input: "batch_normalization_4/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1980295032262802
      }
    }
  }
}
node {
  name: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1980295032262802
      }
    }
  }
}
node {
  name: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\362\354\256\006\000\000\000\000"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_kernel"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stream_3/depthwise_kernel"
    }
  }
}
node {
  name: "stream_3/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "stream_3/depthwise_kernel"
}
node {
  name: "stream_3/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "stream_3/depthwise_kernel"
  input: "stream_3/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "stream_3/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_3/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_3/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "stream_3/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_3/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stream_3/bias"
    }
  }
}
node {
  name: "stream_3/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "stream_3/bias"
}
node {
  name: "stream_3/bias/Assign"
  op: "AssignVariableOp"
  input: "stream_3/bias"
  input: "stream_3/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "stream_3/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_3/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_2/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_3/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_2/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_2/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_2/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "T\000\000\000\r\000\000\000"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_2/depthwise/required_space_to_batch_paddings/base_paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_2/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_2/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_2/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_2/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_2/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "activation_4/Relu"
  input: "stream_3/depthwise_conv2d_2/depthwise/SpaceToBatchND/block_shape"
  input: "stream_3/depthwise_conv2d_2/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_2/depthwise"
  op: "DepthwiseConv2dNative"
  input: "stream_3/depthwise_conv2d_2/depthwise/SpaceToBatchND"
  input: "stream_3/depthwise_conv2d_2/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_2/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_2/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_2/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "stream_3/depthwise_conv2d_2/depthwise"
  input: "stream_3/depthwise_conv2d_2/depthwise/BatchToSpaceND/block_shape"
  input: "stream_3/depthwise_conv2d_2/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_2/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_3/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_3/depthwise_conv2d_2/BiasAdd"
  op: "BiasAdd"
  input: "stream_3/depthwise_conv2d_2/depthwise/BatchToSpaceND"
  input: "stream_3/depthwise_conv2d_2/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_5/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_5/beta"
    }
  }
}
node {
  name: "batch_normalization_5/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_5/beta"
}
node {
  name: "batch_normalization_5/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_5/beta"
  input: "batch_normalization_5/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_5/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_5/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_5/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_5/moving_mean"
}
node {
  name: "batch_normalization_5/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_5/moving_mean"
  input: "batch_normalization_5/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_5/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_5/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_5/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_5/moving_variance"
}
node {
  name: "batch_normalization_5/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_5/moving_variance"
  input: "batch_normalization_5/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_5/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "batch_normalization_5/beta"
  input: "batch_normalization_5/moving_mean"
  input: "batch_normalization_5/moving_variance"
  input: "stream_3/depthwise_conv2d_2/BiasAdd"
  input: "batch_normalization_5/Const"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_5_cond_false_870"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 80
          }
          dim {
            size: 9
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_5_cond_true_869"
      }
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity"
  op: "Identity"
  input: "batch_normalization_5/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity_1"
  op: "Identity"
  input: "batch_normalization_5/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity_2"
  op: "Identity"
  input: "batch_normalization_5/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity_3"
  op: "Identity"
  input: "batch_normalization_5/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity_4"
  op: "Identity"
  input: "batch_normalization_5/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity_5"
  op: "Identity"
  input: "batch_normalization_5/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity_6"
  op: "Identity"
  input: "batch_normalization_5/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity_7"
  op: "Identity"
  input: "batch_normalization_5/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_5/cond/Identity_8"
  op: "Identity"
  input: "batch_normalization_5/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_5/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_5_cond_1_false_932"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_5_cond_1_true_931"
      }
    }
  }
}
node {
  name: "batch_normalization_5/cond_1/Identity"
  op: "Identity"
  input: "batch_normalization_5/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_5/AssignMovingAvg/sub/x"
  input: "batch_normalization_5/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_5/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_5/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_5/AssignMovingAvg/sub_1"
  input: "batch_normalization_5/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_5/moving_mean"
  input: "batch_normalization_5/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_5/moving_mean"
  input: "^batch_normalization_5/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_5/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_5/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_5/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_5/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_5/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_5/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_5/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_5/moving_variance"
  input: "batch_normalization_5/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_5/moving_variance"
  input: "^batch_normalization_5/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "activation_5/Relu"
  op: "Relu"
  input: "batch_normalization_5/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4330126941204071
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4330126941204071
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\247\333/-\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "conv2d_3/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "conv2d_3/kernel/Initializer/stateless_random_uniform/shape"
  input: "conv2d_3/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "conv2d_3/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "conv2d_3/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "conv2d_3/kernel/Initializer/stateless_random_uniform/max"
  input: "conv2d_3/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "conv2d_3/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "conv2d_3/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "conv2d_3/kernel/Initializer/stateless_random_uniform/mul"
  input: "conv2d_3/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_3/kernel"
    }
  }
}
node {
  name: "conv2d_3/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_3/kernel"
}
node {
  name: "conv2d_3/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_3/kernel"
  input: "conv2d_3/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_3/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_3/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_3/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_3/bias"
    }
  }
}
node {
  name: "conv2d_3/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_3/bias"
}
node {
  name: "conv2d_3/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d_3/bias"
  input: "conv2d_3/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_3/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_3/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_3/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/Conv2D"
  op: "Conv2D"
  input: "activation_5/Relu"
  input: "conv2d_3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_3/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_3/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_3/Conv2D"
  input: "conv2d_3/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_6/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_6/beta"
    }
  }
}
node {
  name: "batch_normalization_6/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_6/beta"
}
node {
  name: "batch_normalization_6/beta/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_6/beta"
  input: "batch_normalization_6/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_6/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_6/moving_mean"
    }
  }
}
node {
  name: "batch_normalization_6/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_6/moving_mean"
}
node {
  name: "batch_normalization_6/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_6/moving_mean"
  input: "batch_normalization_6/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_6/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "batch_normalization_6/moving_variance"
    }
  }
}
node {
  name: "batch_normalization_6/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "batch_normalization_6/moving_variance"
}
node {
  name: "batch_normalization_6/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "batch_normalization_6/moving_variance"
  input: "batch_normalization_6/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_6/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "batch_normalization_6/beta"
  input: "batch_normalization_6/moving_mean"
  input: "batch_normalization_6/moving_variance"
  input: "conv2d_3/BiasAdd"
  input: "batch_normalization_6/Const"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_6_cond_false_988"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 80
          }
          dim {
            size: 9
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_6_cond_true_987"
      }
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity"
  op: "Identity"
  input: "batch_normalization_6/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity_1"
  op: "Identity"
  input: "batch_normalization_6/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity_2"
  op: "Identity"
  input: "batch_normalization_6/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity_3"
  op: "Identity"
  input: "batch_normalization_6/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity_4"
  op: "Identity"
  input: "batch_normalization_6/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity_5"
  op: "Identity"
  input: "batch_normalization_6/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity_6"
  op: "Identity"
  input: "batch_normalization_6/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity_7"
  op: "Identity"
  input: "batch_normalization_6/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_6/cond/Identity_8"
  op: "Identity"
  input: "batch_normalization_6/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "batch_normalization_6/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "batch_normalization_6_cond_1_false_1050"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "batch_normalization_6_cond_1_true_1049"
      }
    }
  }
}
node {
  name: "batch_normalization_6/cond_1/Identity"
  op: "Identity"
  input: "batch_normalization_6/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_6/AssignMovingAvg/sub/x"
  input: "batch_normalization_6/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_6/AssignMovingAvg/ReadVariableOp"
  input: "batch_normalization_6/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_6/AssignMovingAvg/sub_1"
  input: "batch_normalization_6/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_6/moving_mean"
  input: "batch_normalization_6/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_6/moving_mean"
  input: "^batch_normalization_6/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_6/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_6/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "batch_normalization_6/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_6/AssignMovingAvg_1/ReadVariableOp"
  input: "batch_normalization_6/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_6/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_6/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "batch_normalization_6/moving_variance"
  input: "batch_normalization_6/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "batch_normalization_6/moving_variance"
  input: "^batch_normalization_6/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "activation_6/Relu"
  op: "Relu"
  input: "batch_normalization_6/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_4/average_pooling2d/AvgPool"
  op: "AvgPool"
  input: "activation_6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 80
        i: 9
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 80
        i: 9
        i: 1
      }
    }
  }
}
node {
  name: "stream_5/flatten/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\020\000\000\000"
      }
    }
  }
}
node {
  name: "stream_5/flatten/Reshape"
  op: "Reshape"
  input: "stream_4/average_pooling2d/AvgPool"
  input: "stream_5/flatten/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "stream_5/flatten/Reshape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dropout_cond_false_1074"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dropout_cond_true_1073"
      }
    }
  }
}
node {
  name: "dropout/cond/Identity"
  op: "Identity"
  input: "dropout/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/cond/Identity_1"
  op: "Identity"
  input: "dropout/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "dropout/cond/Identity_2"
  op: "Identity"
  input: "dropout/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "dropout/cond/Identity_3"
  op: "Identity"
  input: "dropout/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "dropout/cond/Identity_4"
  op: "Identity"
  input: "dropout/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "dropout/cond/Identity_5"
  op: "Identity"
  input: "dropout/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "dropout/cond/Identity_6"
  op: "Identity"
  input: "dropout/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "dropout/cond/Identity_7"
  op: "Identity"
  input: "dropout/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "dense/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5773502588272095
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5773502588272095
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\236\2358\000\000\000\000"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "dense/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "dense/kernel/Initializer/stateless_random_uniform/shape"
  input: "dense/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "dense/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "dense/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "dense/kernel/Initializer/stateless_random_uniform/max"
  input: "dense/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "dense/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "dense/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "dense/kernel/Initializer/stateless_random_uniform/mul"
  input: "dense/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
}
node {
  name: "dense/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense/kernel"
    }
  }
}
node {
  name: "dense/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense/kernel"
}
node {
  name: "dense/kernel/Assign"
  op: "AssignVariableOp"
  input: "dense/kernel"
  input: "dense/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "dense/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense/bias"
    }
  }
}
node {
  name: "dense/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense/bias"
}
node {
  name: "dense/bias/Assign"
  op: "AssignVariableOp"
  input: "dense/bias"
  input: "dense/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "dense/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/MatMul"
  op: "MatMul"
  input: "dropout/cond/Identity"
  input: "dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/BiasAdd"
  op: "BiasAdd"
  input: "dense/MatMul"
  input: "dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "activation_7/Softmax"
  op: "Softmax"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "activation_7_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "total/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "total"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "total"
    }
  }
}
node {
  name: "total/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "total"
}
node {
  name: "total/Assign"
  op: "AssignVariableOp"
  input: "total"
  input: "total/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "total/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "count"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "count"
    }
  }
}
node {
  name: "count/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "count"
}
node {
  name: "count/Assign"
  op: "AssignVariableOp"
  input: "count"
  input: "count/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "count/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/Shape"
  op: "Shape"
  input: "activation_7_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "metrics/accuracy/Squeeze"
  op: "Squeeze"
  input: "activation_7_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "metrics/accuracy/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/accuracy/ArgMax"
  op: "ArgMax"
  input: "activation_7/Softmax"
  input: "metrics/accuracy/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/accuracy/Cast"
  op: "Cast"
  input: "metrics/accuracy/ArgMax"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/Equal"
  op: "Equal"
  input: "metrics/accuracy/Squeeze"
  input: "metrics/accuracy/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "metrics/accuracy/Cast_1"
  op: "Cast"
  input: "metrics/accuracy/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/Reshape"
  op: "Reshape"
  input: "metrics/accuracy/Cast_1"
  input: "metrics/accuracy/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "metrics/accuracy/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/accuracy/Sum"
  op: "Sum"
  input: "metrics/accuracy/Reshape"
  input: "metrics/accuracy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "total"
  input: "metrics/accuracy/Sum"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total"
  input: "^metrics/accuracy/AssignAddVariableOp"
  input: "^metrics/accuracy/Sum"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/Size"
  op: "Size"
  input: "metrics/accuracy/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "metrics/accuracy/Cast_2"
  op: "Cast"
  input: "metrics/accuracy/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/AssignAddVariableOp_1"
  op: "AssignAddVariableOp"
  input: "count"
  input: "metrics/accuracy/Cast_2"
  input: "^metrics/accuracy/AssignAddVariableOp"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "count"
  input: "^metrics/accuracy/AssignAddVariableOp"
  input: "^metrics/accuracy/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/div_no_nan/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total"
  input: "^metrics/accuracy/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/div_no_nan/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "count"
  input: "^metrics/accuracy/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/div_no_nan"
  op: "DivNoNan"
  input: "metrics/accuracy/div_no_nan/ReadVariableOp"
  input: "metrics/accuracy/div_no_nan/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/Identity"
  op: "Identity"
  input: "metrics/accuracy/div_no_nan"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_7_loss/Cast"
  op: "Cast"
  input: "activation_7_target"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_7_loss/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "loss/activation_7_loss/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/activation_7_loss/Reshape"
  op: "Reshape"
  input: "loss/activation_7_loss/Cast"
  input: "loss/activation_7_loss/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/activation_7_loss/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/activation_7_loss/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_7_loss/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_7_loss/strided_slice"
  op: "StridedSlice"
  input: "loss/activation_7_loss/Shape"
  input: "loss/activation_7_loss/strided_slice/stack"
  input: "loss/activation_7_loss/strided_slice/stack_1"
  input: "loss/activation_7_loss/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss/activation_7_loss/Reshape_1/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/activation_7_loss/Reshape_1/shape"
  op: "Pack"
  input: "loss/activation_7_loss/Reshape_1/shape/0"
  input: "loss/activation_7_loss/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss/activation_7_loss/Reshape_1"
  op: "Reshape"
  input: "dense/BiasAdd"
  input: "loss/activation_7_loss/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/activation_7_loss/SparseSoftmaxCrossEntropyWithLogits/Shape"
  op: "Shape"
  input: "loss/activation_7_loss/Reshape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "loss/activation_7_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "loss/activation_7_loss/Reshape_1"
  input: "loss/activation_7_loss/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "loss/activation_7_loss/weighted_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/activation_7_loss/weighted_loss/Mul"
  op: "Mul"
  input: "loss/activation_7_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "loss/activation_7_loss/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_7_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_7_loss/Sum"
  op: "Sum"
  input: "loss/activation_7_loss/weighted_loss/Mul"
  input: "loss/activation_7_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_7_loss/num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "loss/activation_7_loss/num_elements/Cast"
  op: "Cast"
  input: "loss/activation_7_loss/num_elements"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_7_loss/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_7_loss/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_7_loss/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_7_loss/range"
  op: "Range"
  input: "loss/activation_7_loss/range/start"
  input: "loss/activation_7_loss/Rank"
  input: "loss/activation_7_loss/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/activation_7_loss/Sum_1"
  op: "Sum"
  input: "loss/activation_7_loss/Sum"
  input: "loss/activation_7_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_7_loss/value"
  op: "DivNoNan"
  input: "loss/activation_7_loss/Sum_1"
  input: "loss/activation_7_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/activation_7_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
library {
  function {
    signature {
      name: "batch_normalization_4_cond_1_false_802"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_cond_1_false_316"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_1_cond_1_true_435"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9800000190734863
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_1_cond_false_374"
      input_arg {
        name: "readvariableop_batch_normalization_1_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_1_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_1_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_stream_1_depthwise_conv2d_biasadd"
        type: DT_FLOAT
      }
      input_arg {
        name: "fusedbatchnormv3_batch_normalization_1_const"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_1_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_1_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_1_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_stream_1_depthwise_conv2d_biasadd"
      input: "fusedbatchnormv3_batch_normalization_1_const"
      input: "ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_1/beta"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_1/moving_mean"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_1/moving_variance"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 88
                }
                dim {
                  size: 17
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "stream_1/depthwise_conv2d/BiasAdd"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_1/Const"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_5_cond_1_true_931"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9800000190734863
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_6_cond_1_false_1050"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_2_cond_1_false_554"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_5_cond_1_false_932"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_6_cond_true_987"
      input_arg {
        name: "readvariableop_batch_normalization_6_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_6_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_6_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_3_biasadd"
        type: DT_FLOAT
      }
      input_arg {
        name: "fusedbatchnormv3_batch_normalization_6_const"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_6_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_6_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_6_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_3_biasadd"
      input: "fusedbatchnormv3_batch_normalization_6_const"
      input: "ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_6/beta"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_6/moving_mean"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_6/moving_variance"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 80
                }
                dim {
                  size: 9
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "conv2d_3/BiasAdd"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_6/Const"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_6_cond_1_true_1049"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9800000190734863
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_1_cond_1_false_436"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_6_cond_false_988"
      input_arg {
        name: "readvariableop_batch_normalization_6_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_6_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_6_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_3_biasadd"
        type: DT_FLOAT
      }
      input_arg {
        name: "fusedbatchnormv3_batch_normalization_6_const"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_6_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_6_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_6_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_3_biasadd"
      input: "fusedbatchnormv3_batch_normalization_6_const"
      input: "ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_6/beta"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_6/moving_mean"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_6/moving_variance"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 80
                }
                dim {
                  size: 9
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "conv2d_3/BiasAdd"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_6/Const"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_cond_false_254"
      input_arg {
        name: "readvariableop_batch_normalization_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_stream_conv2d_biasadd"
        type: DT_FLOAT
      }
      input_arg {
        name: "fusedbatchnormv3_batch_normalization_const"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_stream_conv2d_biasadd"
      input: "fusedbatchnormv3_batch_normalization_const"
      input: "ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization/beta"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization/moving_mean"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization/moving_variance"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 90
                }
                dim {
                  size: 19
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "stream/conv2d/BiasAdd"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization/Const"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_4_cond_false_740"
      input_arg {
        name: "readvariableop_batch_normalization_4_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_4_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_4_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_2_biasadd"
        type: DT_FLOAT
      }
      input_arg {
        name: "fusedbatchnormv3_batch_normalization_4_const"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_4_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_4_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_4_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_2_biasadd"
      input: "fusedbatchnormv3_batch_normalization_4_const"
      input: "ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_4/beta"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_4/moving_mean"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_4/moving_variance"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 84
                }
                dim {
                  size: 13
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "conv2d_2/BiasAdd"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_4/Const"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_3_cond_1_true_683"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9800000190734863
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_3_cond_1_false_684"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
  }
  function {
    signature {
      name: "dropout_cond_true_1073"
      input_arg {
        name: "dropout_mul_stream_5_flatten_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "dropout_selectv2"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.25
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "dropout_mul_stream_5_flatten_reshape"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000\020\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "dropout/SelectV2"
      op: "SelectV2"
      input: "dropout/GreaterEqual:z:0"
      input: "dropout/Mul:z:0"
      input: "dropout/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "dropout/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "dropout/Mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "dropout/Shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/RandomUniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "dropout/Const_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "dropout_selectv2"
      value: "dropout/SelectV2:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "stream_5/flatten/Reshape"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_1_cond_true_373"
      input_arg {
        name: "readvariableop_batch_normalization_1_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_1_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_1_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_stream_1_depthwise_conv2d_biasadd"
        type: DT_FLOAT
      }
      input_arg {
        name: "fusedbatchnormv3_batch_normalization_1_const"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_1_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_1_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_1_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_stream_1_depthwise_conv2d_biasadd"
      input: "fusedbatchnormv3_batch_normalization_1_const"
      input: "ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_1/beta"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_1/moving_mean"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_1/moving_variance"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 88
                }
                dim {
                  size: 17
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "stream_1/depthwise_conv2d/BiasAdd"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_1/Const"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_4_cond_true_739"
      input_arg {
        name: "readvariableop_batch_normalization_4_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_4_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_4_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_2_biasadd"
        type: DT_FLOAT
      }
      input_arg {
        name: "fusedbatchnormv3_batch_normalization_4_const"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_4_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_4_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_4_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_2_biasadd"
      input: "fusedbatchnormv3_batch_normalization_4_const"
      input: "ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_4/beta"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_4/moving_mean"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_4/moving_variance"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 84
                }
                dim {
                  size: 13
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "conv2d_2/BiasAdd"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_4/Const"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_5_cond_true_869"
      input_arg {
        name: "readvariableop_batch_normalization_5_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_5_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_5_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_stream_3_depthwise_conv2d_2_biasadd"
        type: DT_FLOAT
      }
      input_arg {
        name: "fusedbatchnormv3_batch_normalization_5_const"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_5_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_5_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_5_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_stream_3_depthwise_conv2d_2_biasadd"
      input: "fusedbatchnormv3_batch_normalization_5_const"
      input: "ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_5/beta"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_5/moving_mean"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_5/moving_variance"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 80
                }
                dim {
                  size: 9
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "stream_3/depthwise_conv2d_2/BiasAdd"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_5/Const"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_cond_1_true_315"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9800000190734863
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_2_cond_1_true_553"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9800000190734863
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_5_cond_false_870"
      input_arg {
        name: "readvariableop_batch_normalization_5_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_5_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_5_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_stream_3_depthwise_conv2d_2_biasadd"
        type: DT_FLOAT
      }
      input_arg {
        name: "fusedbatchnormv3_batch_normalization_5_const"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_5_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_5_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_5_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_stream_3_depthwise_conv2d_2_biasadd"
      input: "fusedbatchnormv3_batch_normalization_5_const"
      input: "ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_5/beta"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_5/moving_mean"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_5/moving_variance"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 80
                }
                dim {
                  size: 9
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "stream_3/depthwise_conv2d_2/BiasAdd"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_5/Const"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_2_cond_false_492"
      input_arg {
        name: "readvariableop_batch_normalization_2_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_2_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_2_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_1_biasadd"
        type: DT_FLOAT
      }
      input_arg {
        name: "fusedbatchnormv3_batch_normalization_2_const"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_2_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_2_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_2_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_1_biasadd"
      input: "fusedbatchnormv3_batch_normalization_2_const"
      input: "ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_2/beta"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_2/moving_mean"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_2/moving_variance"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 88
                }
                dim {
                  size: 17
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "conv2d_1/BiasAdd"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_2/Const"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_cond_true_253"
      input_arg {
        name: "readvariableop_batch_normalization_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_stream_conv2d_biasadd"
        type: DT_FLOAT
      }
      input_arg {
        name: "fusedbatchnormv3_batch_normalization_const"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_stream_conv2d_biasadd"
      input: "fusedbatchnormv3_batch_normalization_const"
      input: "ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization/beta"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization/moving_mean"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization/moving_variance"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 90
                }
                dim {
                  size: 19
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "stream/conv2d/BiasAdd"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization/Const"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dropout_cond_false_1074"
      input_arg {
        name: "identity_stream_5_flatten_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_stream_5_flatten_reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "stream_5/flatten/Reshape"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_2_cond_true_491"
      input_arg {
        name: "readvariableop_batch_normalization_2_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_2_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_2_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_conv2d_1_biasadd"
        type: DT_FLOAT
      }
      input_arg {
        name: "fusedbatchnormv3_batch_normalization_2_const"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_2_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_2_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_2_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_conv2d_1_biasadd"
      input: "fusedbatchnormv3_batch_normalization_2_const"
      input: "ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_2/beta"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_2/moving_mean"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_2/moving_variance"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 88
                }
                dim {
                  size: 17
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "conv2d_1/BiasAdd"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_2/Const"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_3_cond_false_622"
      input_arg {
        name: "readvariableop_batch_normalization_3_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_3_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_3_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_stream_2_depthwise_conv2d_1_biasadd"
        type: DT_FLOAT
      }
      input_arg {
        name: "fusedbatchnormv3_batch_normalization_3_const"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_3_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_3_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_3_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_stream_2_depthwise_conv2d_1_biasadd"
      input: "fusedbatchnormv3_batch_normalization_3_const"
      input: "ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_3/beta"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_3/moving_mean"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_3/moving_variance"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 84
                }
                dim {
                  size: 13
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "stream_2/depthwise_conv2d_1/BiasAdd"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_3/Const"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_3_cond_true_621"
      input_arg {
        name: "readvariableop_batch_normalization_3_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_batch_normalization_3_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_batch_normalization_3_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_stream_2_depthwise_conv2d_1_biasadd"
        type: DT_FLOAT
      }
      input_arg {
        name: "fusedbatchnormv3_batch_normalization_3_const"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_batch_normalization_3_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_batch_normalization_3_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_batch_normalization_3_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_stream_2_depthwise_conv2d_1_biasadd"
      input: "fusedbatchnormv3_batch_normalization_3_const"
      input: "ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_3/beta"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_3/moving_mean"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_3/moving_variance"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 84
                }
                dim {
                  size: 13
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "stream_2/depthwise_conv2d_1/BiasAdd"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 16
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "batch_normalization_3/Const"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "batch_normalization_4_cond_1_true_801"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9800000190734863
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
  }
}
versions {
  producer: 1482
  min_consumer: 12
}
